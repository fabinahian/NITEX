{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"#IMPORT LIBRARIES\n\nimport tensorflow as tf\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\nfrom tensorflow.python import keras\nimport math\nimport pickle\nimport pandas as pd\nimport numpy as np\n\n#LOAD THE MODEL\n\nwith open('/kaggle/input/model-weight/fashion_mnist.pkl','rb') as f:\n    model = pickle.load(f)\n\n#DATA PRE-PROCESSING\n\ndef data_preprocessing(raw):\n    label = tf.keras.utils.to_categorical(raw.label, 10)\n    num_images = raw.shape[0]\n    x_as_array = raw.values[:,1:]\n    x_shaped_array = x_as_array.reshape(num_images, 28, 28, 1)\n    image = x_shaped_array / 255\n    return image, label\n\n#LOAD THE TEST DATA \n\ndf_test  = pd.read_csv(input(\"Enter file path of test data\"))\nX_test, y_test = data_preprocessing(df_test)\n\n#EVALUATE THE MODEL\n\nscore = model.evaluate(X_test, y_test, steps=math.ceil(10000/32))\n\n#LOSS & ACCURACY\n\nloss = score[0]\naccuracy = score[1]\n\n#CONVERTING LOSS & ACCURACY TO STRING FORMAT\n\ns_loss=str(loss)\n\ns_accu=str(accuracy)\n\n#OUTPUT TEXT DOCUMENT\n\ndef myprint(s):\n    with open('output.txt','a') as f:\n        print(s, file=f)\nmodel.summary(print_fn=myprint)\n\ny_pred = model.predict(X_test)\ny_pred_classes = np.argmax(y_pred, axis = 1)\ny_true = np.argmax(y_test, axis = 1)\n\nconfusion_mtx = confusion_matrix(y_true, y_pred_classes) \ncm = str(confusion_mtx)\n\n#LABELS\n\nclass_names = ['T-shirt/top',\n            'Trouser',\n            'Pullover',\n            'Dress',\n            'Coat',\n            'Sandal',\n            'Shirt',\n            'Sneaker',\n            'Bag',\n            'Ankle boot']\n\nf1 = classification_report(y_true,y_pred_classes, target_names= class_names)\n\nsend=['Loss: '+s_loss+\"\\n\",'Accuracy: '+s_accu+\"\\n\\n\", 'Confusion Matrix: \\n'+cm+\"\\n\\n\",  'Performance Report(Precision, Recall, F1 Score): \\n\\n'+f1+\"\\n\\n\", \"This is the dummy paragraph\" ]\n\nwith open(\"output.txt\",\"a\") as file1:\n    file1.writelines(send)\n    file1.close()","metadata":{"_uuid":"711efc60-2920-420b-859d-8d3c8ea678d0","_cell_guid":"1e6b3a13-7ecf-42c0-aff5-5f4adf9fde0c","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]}]}